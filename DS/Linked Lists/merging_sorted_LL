#include <bits/stdc++.h>
using namespace std;


class node {
  public:
  int data;
  node* next;

  node(int data) {
    this->data = data;
  }
};

void insertAtHead(node* &head, int data) {
  node* n = new node(data);
  n->next = head;
  head = n;
}

void insertNodeAtEnd(node* &head, int data) {

  if(head == NULL) {
    insertAtHead(head, data);
    return;
  }
  node* tail = head;
  while(tail->next!=NULL) {
    tail = tail->next;
  }
  node* n = new node(data);
  n->next = NULL;
  tail->next = n;
}

void insertAtMiddle(node* head, int data,int pos) {
  node* n = new node(data);
  int jumps = 0;
  while(jumps < pos-2) {
    head = head->next;
    jumps++;
  }
  n->next = head->next;
  head->next = n;
  
}

void print(node* head) {
  while(head!=NULL) {
    cout << head->data <<"-->";
    head = head->next;
  }
}

node* kthNodeFromEnd(node* head, int k) {
  node* fast = head;
  node* slow = head;

  while(k--) {
    fast = fast->next;
  }
  while(fast!=NULL) {
    fast = fast->next;
    slow = slow->next;
  }
  return slow;
}

void buildList(node* &head) {
  int data;
  cin >> data;
  while(data != -1){
    insertNodeAtEnd(head,data);
    cin >> data;
  }
}
istream& operator>>(istream &is, node* &head) {
  buildList(head);
  return is;
}

ostream& operator<<(ostream& os, node* &head) {
  print(head);
  return os;
}

node* merge(node* a, node* b) {
  if(a == NULL) {
    return b;
  }
  if(b == NULL) {
    return a;
  }
  node* c;
  if(a->data < b->data) {
    c = a;
    c->next = merge(a->next, b);
  }  
  if(a->data >= b->data){
    c = b;
    c->next = merge(a, b->next);   
  }
  return c;
}
int main() {
  node* head = NULL;
  node* head2 = NULL;
  cin >> head >> head2;
  cout << head << head2 << endl;
  head = merge(head, head2);
  cout << head;


  return 0;
}
